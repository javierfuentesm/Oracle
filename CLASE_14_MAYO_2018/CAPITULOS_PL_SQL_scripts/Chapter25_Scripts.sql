-- *** Chapter Exercises *** --
-- ***

-- For Example ch25_1a.sql
SET TIMING ON;
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 0;

1 DECLARE
2    v_num1   NUMBER;
3    v_num2   NUMBER;
4    v_num3   NUMBER;
5    v_run_id BINARY_INTEGER; -- run ID generated by the profiler
6 BEGIN
7    DBMS_PROFILER.START_PROFILER ('Optimizer level at 0');
8  
9    FOR i IN 1..1000000
10   LOOP
11      v_num1 := 1;
12      v_num2 := i + i/2 + sqrt(i);
13      v_num3 := v_num1 + v_num2;
14   END LOOP;
15  
16   DBMS_PROFILER.STOP_PROFILER();
17  
18   SELECT runid
19     INTO v_run_id
20     FROM plsql_profiler_runs
21    WHERE run_comment = 'Optimizer level at 0';
22  
23    DBMS_OUTPUT.PUT_LINE ('Optimizer level at 0, run ID - '||v_run_id);
24 END;

-- For Example ch25_1b.sql
SET TIMING ON;
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 1;

1 DECLARE
2    v_num1   NUMBER;
3    v_num2   NUMBER;
4    v_num3   NUMBER;
5    v_run_id BINARY_INTEGER; -- run ID generated by the profiler
6 BEGIN
7    DBMS_PROFILER.START_PROFILER ('Optimizer level at 1');
8  
9    FOR i IN 1.. 1000000
10   LOOP
11      v_num1 := 1;
12      v_num2 := i + i/2 + sqrt(i);
13      v_num3 := v_num1 + v_num2;
14   END LOOP;
15  
16   DBMS_PROFILER.STOP_PROFILER();
17  
18   SELECT runid
19     INTO v_run_id
20     FROM plsql_profiler_runs
21    WHERE run_comment = 'Optimizer level at 1';
22  
23    DBMS_OUTPUT.PUT_LINE ('Optimizer level at 1, run ID - '||v_run_id);
24 END;


-- For Example ch25_1c.sql
SET TIMING ON;
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 2;

1 DECLARE
2    v_num1   NUMBER;
3    v_num2   NUMBER;
4    v_num3   NUMBER;
5    v_run_id BINARY_INTEGER; -- run ID generated by the profiler
6 BEGIN
7    DBMS_PROFILER.START_PROFILER ('Optimizer level at 2');
8  
9    FOR i IN 1.. 1000000
10   LOOP
11      v_num1 := 1;
12      v_num2 := i + i/2 + sqrt(i);
13      v_num3 := v_num1 + v_num2;
14   END LOOP;
15  
16   DBMS_PROFILER.STOP_PROFILER();
17  
18   SELECT runid
19     INTO v_run_id
20     FROM plsql_profiler_runs
21    WHERE run_comment = 'Optimizer level at 2';
22  
23    DBMS_OUTPUT.PUT_LINE ('Optimizer level at 2, run ID - '||v_run_id);
24 END;


-- For Example ch25_2a.sql
SET TIMING ON; 

-- Create test table
CREATE TABLE TEST_TAB 
   (col1 NUMBER);
/
-- Populate newly created table with random data
INSERT INTO TEST_TAB
SELECT ROUND(DBMS_RANDOM.VALUE (1, 99999999), 0)
  FROM dual
CONNECT by level < 100001;
COMMIT;

-- Collect statistics
EXEC DBMS_STATS.GATHER_TABLE_STATS (user, 'TEST_TAB');

-- Run the same code sample with different optimization levels
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 1;

BEGIN
   FOR rec IN (SELECT col1 FROM test_tab)
   LOOP
      null; -- do nothing
   END LOOP;
END;
/

ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 2;

BEGIN
   FOR REC IN (SELECT col1 FROM test_tab)
   LOOP
      NULL; -- do nothing
   END LOOP;
END; 
/
  
  
--   For Example?ch25_3a.sql
SET TIMING ON; 

-- Create test table
CREATE TABLE test_tab1 (col1 NUMBER);
/

-- Run the same code sample with different optimization levels
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 1;

BEGIN
   FOR rec IN (SELECT col1 FROM test_tab)
   LOOP
      INSERT INTO TEST_TAB1 VALUES (rec.col1); -- populate newly created table
   END LOOP;
END;
/

ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 2;

BEGIN
   FOR REC IN (SELECT col1 FROM test_tab)
   LOOP
      INSERT INTO TEST_TAB1 VALUES (rec.col1); -- populate newly created table
   END LOOP;
END; 
/


-- For Example ch25_4a.sql
SET TIMING ON;
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 2;

1  DECLARE
2     v_num    PLS_INTEGER;
3     v_run_id BINARY_INTEGER; -- run ID generated by the profiler
4
5     FUNCTION test_func (num1 IN PLS_INTEGER
6                        ,num2 IN PLS_INTEGER)
7     RETURN PLS_INTEGER
8     IS
9     BEGIN
10       RETURN (num1 + num2);
11    END test_func;
12
13 BEGIN
14    DBMS_HPROF.START_PROFILING ('PLSHPROF_DIR', 'test.txt');
15    FOR i IN 1..100000
16    LOOP
17       v_num := test_func (i-1, i);
18    END LOOP;
19    DBMS_HPROF.STOP_PROFILING;
20
21    -- Analyze profiler output and display its run ID
22    v_run_id := DBMS_HPROF.ANALYZE ('PLSHPROF_DIR', 'test.txt');
23    DBMS_OUTPUT.PUT_LINE ('Inline pragma is not enabled, run ID - '||v_run_id);
24 END;


-- For Example ch25_4b.sql
SET TIMING ON;
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 2;

1  DECLARE
2     v_num    PLS_INTEGER;
3     v_run_id BINARY_INTEGER; -- run ID generated by the profiler
4  
5     FUNCTION test_func (num1 IN PLS_INTEGER
6                        ,num2 IN PLS_INTEGER)
7     RETURN PLS_INTEGER
8     IS
9     BEGIN
10       RETURN (num1 + num2);
11   END test_func;
12
13 BEGIN
14    DBMS_HPROF.START_PROFILING ('PLSHPROF_DIR', 'test.txt');
15    FOR i IN 1..100000
16    LOOP
17       -- Inline pragma is enabled for each function call
18       PRAGMA INLINE (test_func, 'YES');
19       v_num := test_func (i-1, i);
20    END LOOP;
21    DBMS_HPROF.STOP_PROFILING;
22
23    -- Analyze profiler output and display its run ID
24    v_run_id := DBMS_HPROF.ANALYZE ('PLSHPROF_DIR', 'test.txt');
25    DBMS_OUTPUT.PUT_LINE ('Inline pragma is enabled, run ID - '||v_run_id);
26 END;


-- For Example ch25_4c.sql
SET TIMING ON;
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 2;

1  DECLARE
2     v_num    PLS_INTEGER;
3     v_run_id BINARY_INTEGER; -- run ID generated by the profiler
4  
5     FUNCTION test_func (num1 IN PLS_INTEGER
6                        ,num2 IN PLS_INTEGER)
7     RETURN PLS_INTEGER
8     IS
9     BEGIN
10      RETURN (num1 + num2);
11    END test_func;
12
13 BEGIN
14    DBMS_HPROF.START_PROFILING ('PLSHPROF_DIR', 'test.txt');
15   
16    -- Inline pragma is moved outside the loop
17    PRAGMA INLINE (test_func, 'YES');
18    FOR i IN 1..100000
19    LOOP
20       v_num := test_func (i-1, i);
21    END LOOP;
22    DBMS_HPROF.STOP_PROFILING;
23 
24    -- Analyze profiler output and display its run ID
25    v_run_id := DBMS_HPROF.ANALYZE ('PLSHPROF_DIR', 'test.txt');
26    DBMS_OUTPUT.PUT_LINE 
27       ('Inline pragma is enabled for a single call, run ID - '||v_run_id);
28 END;
  
  
-- For Example ch25_4d.sql
SET TIMING ON;
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 2;

1  DECLARE
2     v_num    PLS_INTEGER;
3     v_run_id BINARY_INTEGER; -- run ID generated by the profiler
4  
5  BEGIN
6     DBMS_HPROF.START_PROFILING ('PLSHPROF_DIR', 'test.txt');
7     FOR i IN 1..100000
8     LOOP
9        v_num := i-1 + i; -- there is no reference to test_func
10    END LOOP;
11    DBMS_HPROF.STOP_PROFILING;
12 
13    -- Analyze profiler output and display its run ID
14    v_run_id := DBMS_HPROF.ANALYZE ('PLSHPROF_DIR', 'test.txt');
15    DBMS_OUTPUT.PUT_LINE ('Inline pragma is enabled, run ID - '||v_run_id);
16 END;


-- For Example ch25_4e.sql
SET TIMING ON;
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 3;

1  DECLARE
2     v_num    PLS_INTEGER;
3     v_run_id BINARY_INTEGER; -- run ID generated by the profiler
4  
5     FUNCTION test_func (num1 IN PLS_INTEGER
6                        ,num2 IN PLS_INTEGER)
7     RETURN PLS_INTEGER
8     IS
9     BEGIN
10      RETURN (num1 + num2);
11    END test_func;
12
13 BEGIN
14    DBMS_HPROF.START_PROFILING ('PLSHPROF_DIR', 'test.txt');
15   
16    FOR i IN 1..100000
17    LOOP
18       v_num := test_func (i-1, i);
19    END LOOP;
20    DBMS_HPROF.STOP_PROFILING;
21 
22    -- Analyze profiler output and display its run ID
23    v_run_id := DBMS_HPROF.ANALYZE ('PLSHPROF_DIR', 'test.txt');
24    DBMS_OUTPUT.PUT_LINE ('Inline pragma is enabled implicitly, run ID - '||v_run_id);
25 END;
 
 
-- For Example?ch25_5a.sql
SET TIMING ON;
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 2;

1  DECLARE
2     v_run_id BINARY_INTEGER; -- run ID generated by the profiler
3
4     FUNCTION f1 (num1 IN PLS_INTEGER
5                 ,num2 IN PLS_INTEGER)
6     RETURN PLS_INTEGER
7     IS
8     BEGIN
9        RETURN (num1 + num2);
10    END f1;
11
12    FUNCTION f2 (str1 IN VARCHAR2
13                ,str2 IN VARCHAR2)
14    RETURN VARCHAR2
15    IS
16    BEGIN
17       RETURN (str1||' '||str2);
18    END f2;
19
20    PROCEDURE p1 (num1 IN PLS_INTEGER
21                 ,num2 IN PLS_INTEGER
22                 ,str1 IN VARCHAR2
23                 ,str2 IN VARCHAR2)
24    IS
25       v_num NUMBER;
26       v_str VARCHAR2(100);
27    BEGIN
28       v_num := f1(num1, num2);
29       v_str := f2(str1, str2);
30    END p1;
31
32 BEGIN
33    DBMS_HPROF.START_PROFILING ('PLSHPROF_DIR', 'test.txt');
34    FOR i in 1..100000
35    LOOP
36       -- Inline pragma is enabled for each procedure call
37       PRAGMA INLINE (p1, 'YES');
38       p1 (i-1, i, to_char(i-1), to_char(i));
39    END LOOP;
40    DBMS_HPROF.STOP_PROFILING;
41
42    -- Analyze profiler output
43    v_run_id := DBMS_HPROF.ANALYZE ('PLSHPROF_DIR', 'test.txt');
44    DBMS_OUTPUT.PUT_LINE ('Inline pragma is enabled, run ID - '||v_run_id);
45 END;


-- For Example?ch25_5b.sql
SET TIMING ON;
ALTER SESSION SET PLSQL_OPTIMIZE_LEVEL = 3;

1  DECLARE
2     v_run_id BINARY_INTEGER; -- run ID generated by the profiler
3
4     FUNCTION f1 (num1 IN PLS_INTEGER
5                 ,num2 IN PLS_INTEGER)
6     RETURN PLS_INTEGER
7     IS
8        v_num PLS_INTEGER;
9     BEGIN
10       SELECT num1 + num2 
11         INTO v_num
12         FROM dual;
13       RETURN v_num;
14    END f1;
15
16    FUNCTION f2 (str1 IN VARCHAR2
17                ,str2 IN VARCHAR2)
18    RETURN VARCHAR2
19    IS
20       v_srt VARCHAR2(50);
21    BEGIN
22       SELECT str1||' '||str2
23         INTO v_str
24         FROM dual;
25       RETURN (v_str);
26    END f2;
27
28    PROCEDURE p1 (num1 IN PLS_INTEGER
29                 ,num2 IN PLS_INTEGER
30                 ,str1 IN VARCHAR2
31                 ,str2 IN VARCHAR2)
32    IS
33       v_num NUMBER;
34       v_str VARCHAR2(100);
35    BEGIN
36       v_num := f1(num1, num2);
37       v_str := f2(str1, str2);
38    END p1;
39
40 BEGIN
41    DBMS_HPROF.START_PROFILING ('PLSHPROF_DIR', 'test.txt');
42    FOR i in 1..100000
43    LOOP
44       p1 (i-1, i, to_char(i-1), to_char(i));
45    END LOOP;
46    DBMS_HPROF.STOP_PROFILING;
47
48    -- Analyze profiler output
49    v_run_id := DBMS_HPROF.ANALYZE ('PLSHPROF_DIR', 'test.txt');
50    DBMS_OUTPUT.PUT_LINE ('Inline pragma is enabled, run ID - '||v_run_id);
51 END;
